define(["./arrayRemoveDuplicates-99a4d101","./Transforms-7a61bdac","./Matrix2-590828b3","./Check-3bce9c53","./ComponentDatatype-e160d612","./CoplanarPolygonGeometryLibrary-674a1990","./defaultValue-69ee94f4","./GeometryAttribute-80f64991","./GeometryAttributes-1b4134a9","./GeometryInstance-1c33d7e8","./GeometryPipeline-31819cdf","./IndexDatatype-2373d532","./PolygonGeometryLibrary-3d49c16d","./_commonjsHelpers-3aae1032-15991586","./combine-0259f56f","./RuntimeError-0e565491","./WebGLConstants-f63312fc","./OrientedBoundingBox-a9f82aab","./EllipsoidTangentPlane-95768776","./AxisAlignedBoundingBox-7ff48b89","./IntersectionTests-935e2a11","./Plane-40d30c90","./AttributeCompression-5a90fdf9","./EncodedCartesian3-184b1f51","./ArcType-e1641d8d","./EllipsoidRhumbLine-c6abed7f","./PolygonPipeline-a0423ab3"],(function(e,t,n,o,r,i,a,y,c,l,s,u,p,d,m,f,g,b,h,P,G,L,T,C,E,H,k){"use strict";function A(e){const t=e.length,n=new Float64Array(3*t),o=u.IndexDatatype.createTypedArray(t,2*t);let i=0,a=0;for(let r=0;r<t;r++){const y=e[r];n[i++]=y.x,n[i++]=y.y,n[i++]=y.z,o[a++]=r,o[a++]=(r+1)%t}const l=new c.GeometryAttributes({position:new y.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:n})});return new y.Geometry({attributes:l,indices:o,primitiveType:y.PrimitiveType.LINES})}function _(e){const t=(e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT)).polygonHierarchy;this._polygonHierarchy=t,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=p.PolygonGeometryLibrary.computeHierarchyPackedLength(t)+1}_.fromPositions=function(e){return new _({polygonHierarchy:{positions:(e=a.defaultValue(e,a.defaultValue.EMPTY_OBJECT)).positions}})},_.pack=function(e,t,n){return n=a.defaultValue(n,0),t[n=p.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n)]=e.packedLength,t};const w={polygonHierarchy:{}};return _.unpack=function(e,t,n){t=a.defaultValue(t,0);const o=p.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);t=o.startingIndex,delete o.startingIndex;const r=e[t];return a.defined(n)||(n=new _(w)),n._polygonHierarchy=o,n.packedLength=r,n},_.createGeometry=function(o){const r=o._polygonHierarchy;let a=r.positions;if(a=e.arrayRemoveDuplicates(a,n.Cartesian3.equalsEpsilon,!0),a.length<3)return;if(!i.CoplanarPolygonGeometryLibrary.validOutline(a))return;const c=p.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(r,!1);if(0===c.length)return;const u=[];for(let e=0;e<c.length;e++){const t=new l.GeometryInstance({geometry:A(c[e])});u.push(t)}const d=s.GeometryPipeline.combineInstances(u)[0],m=t.BoundingSphere.fromPoints(r.positions);return new y.Geometry({attributes:d.attributes,indices:d.indices,primitiveType:d.primitiveType,boundingSphere:m})},function(e,t){return a.defined(t)&&(e=_.unpack(e,t)),e._ellipsoid=n.Ellipsoid.clone(e._ellipsoid),_.createGeometry(e)}}));
