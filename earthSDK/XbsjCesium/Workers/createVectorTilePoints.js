define(["./AttributeCompression-5a90fdf9","./Matrix2-590828b3","./ComponentDatatype-e160d612","./createTaskProcessorWorker","./Check-3bce9c53","./defaultValue-69ee94f4","./RuntimeError-0e565491","./WebGLConstants-f63312fc"],(function(e,t,a,r,n,o,i,s){"use strict";const c=32767,u=new t.Cartographic,p=new t.Cartesian3,l=new t.Rectangle,f=new t.Ellipsoid,m={min:void 0,max:void 0};return r((function(r,n){const o=new Uint16Array(r.positions);!function(e){e=new Float64Array(e);let a=0;m.min=e[a++],m.max=e[a++],t.Rectangle.unpack(e,a,l),a+=t.Rectangle.packedLength,t.Ellipsoid.unpack(e,a,f)}(r.packedBuffer);const i=l,s=f,h=m.min,C=m.max,d=o.length/3,g=o.subarray(0,d),b=o.subarray(d,2*d),k=o.subarray(2*d,3*d);e.AttributeCompression.zigZagDeltaDecode(g,b,k);const w=new Float64Array(o.length);for(let e=0;e<d;++e){const r=g[e],n=b[e],o=k[e],l=a.CesiumMath.lerp(i.west,i.east,r/c),f=a.CesiumMath.lerp(i.south,i.north,n/c),m=a.CesiumMath.lerp(h,C,o/c),d=t.Cartographic.fromRadians(l,f,m,u),y=s.cartographicToCartesian(d,p);t.Cartesian3.pack(y,w,3*e)}return n.push(w.buffer),{positions:w.buffer}}))}));
